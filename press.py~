#!/usr/bin/env python
# -*- coding: utf-8 -*-
from time import sleep
from pid import PID



class Zone() :

	def __init__(self, i, press) :
		self.i = i
		self.pid = PID()
		self.t = 0
		self.prog = [[10,12,34,5,700,5],[100,200,200,123,10,0]]
		self.press = press
		self.t = []
		
	def get_conf(self) :
		self.heater_n = self.press.get_conf("Zone%s"%self.i, "heater") 
		self.cooler_n = self.press.get_conf("Zone%s"%self.i, "cooler") 
		self.t_n = self.press.get_conf("Zone%s"%self.i, "t_n") 
		self.t1_n = self.press.get_conf("Zone%s"%self.i, "t1_n") 
		self.dead_band = self.press.get_conf("Zone%s"%self.i, "Мертвая_зона") 
		self.pid.Kp = self.press.get_conf("Zone%s"%self.i, "p") 
		self.pid.Ki = self.press.get_conf("Zone%s"%self.i, "i") 
		self.pid.Kd = self.press.get_conf("Zone%s"%self.i, "d") 

		while True: 
			y = self.press.get_conf("Zone%s"%self.i, "t%s"%i, set_value=False)
			t += self.press.get_conf("Zone%s"%self.i, "Время_%s"%i, set_value=False)
			if y==None : break
			self.prog.append((t,y))

	def update(self, cycle) :
		self.pid.set_point = self.get_command(cycle)
		c = self.pid.update(self.t)
		if c > self.dead_band :
			c = min(c,self.max_heat_t)
			self.heater_off = time()+c
			self.heater = True
			self.cooler = False
		elif c < -self.dead_band :
			c = min(-c,self.max_heat_t)
			self.cooler_off = time()+c
			self.heater = False
			self.cooler = True
	
	def off_update(self):
		if self.heater and self.heater_off < time() :
			self.heater = False
		if self.cooler and self.cooler_off < time() :
			self.cooler = False
		
	def get_command(self, cycle) :
		t = 0 
		if cycle <= 0:
			return self.prog[1][0]
		if cycle >= sum(self.prog[0])-self.prog[0][-1] :
			return self.prog[1][-1]

		for i in range(len(self.prog[0])) :
			t += self.prog[0][i]
			if t>cycle :
				break
		t1 = t - self.prog[0][i]		
		
		t_ = float(cycle - t1)/(t-t1)
#		print cycle, i, t, t1, t_,
		return float(self.prog[1][i+1] - self.prog[1][i]) * t_ + self.prog[1][i]


class Push() :
	def __init__(self, press) :	
		self.press = press

		
	def update(self, cycle) :
		self.pid.set_point = self.get_command(cycle)
		c = self.pid.update(self.t)
		if c > 0 :
			c = min(c,self.max_heat_t)
			self.heater_off = time()+c
			self.heater = True
			self.cooler = False
		elif c < 0 :
			c = min(-c,self.max_heat_t)
			self.cooler_off = time()+c
			self.heater = False
			self.cooler = True


	def get_conf(self, conf) :
		self.down_n = self.press.get_conf("Push", "down_n") 
		self.up_n = self.press.get_conf("Push", "up_n") 
		self.pid.Kp = self.press.get_conf("Push", "p") 
		self.pid.Ki = self.press.get_conf("Push", "i") 
		self.pid.Kd = self.press.get_conf("Push", "d") 

		self.prog = []		
		while True: 
			y = self.press.get_conf("Push", "t%s"%i, set_value=False)
			t += self.press.get_conf("Push", "Время_%s"%i, set_value=False)
			if y==None : break
			self.prog.append((t,y))

class Press():
	def __init__(self) :
		for i in range(8) :
			z = Zone(i, self)
			z.get_conf(self.conf)			
			self.zone.append(z)
		self.sens = [0. for i in range(24)]
		self.rele = []
		self.inv = []
		
		
		

	def run(self) :
		for z in self.zone : 
			z.get_conf(conf)


	def update_rs(self, c) :
		n = 32
		
		if n % 2 :
			# write rele
			state = [False for i in range(32)]
			
			for z in self.z :
 				state[z.heater_n] = z.heater
			
			state[self.push.down_n] = self.push.down
			state[self.push.up_n] = self.push.up
 				
 			t, t1 = 0,0
			for i in range(16):
				t |= (1<<i)*state[i]
				t1 |= (1<<i)*state[i+16]
			
			if self.state != state :
			self.mu110.write_register(0x62, t, 0) # Registernumber, value, number of decimals for storage
			self.mu110.write_register(0x61, t1, 0) # Registernumber, value, number of decimals for storage
	
		if c%n<17 :
			# read temp
			
			mv = self.mv110[c%17/8]
			v = mv.read_register(c%8*6+1)
			m = mv.read_register(c%8*6+0)
			self.sens[c] = float(v)/(10**m)		
		
		
		
						
	def update(self, self.iter) :
		counter = 0
		while not self.quit:
			counter += 1
			gobject.idle_add(self.update_rs, counter)
			sleep(0.1)
	
	def operate(self):
		pass

z = Zone()

for i in range(1000) :
	print z.get_command(i)
